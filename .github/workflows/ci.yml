name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a specific version like '3.11' if needed

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Lint Python code with Flake8
        run: flake8 . # Assumes flake8 is added to requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Match the version used in development/Dockerfile.frontend if possible
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Lint Frontend code with ESLint
        run: npm run lint # Assumes 'lint' script exists in package.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint # Ensure linting passes before testing
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: lm_studio_agents_test
        ports:
          - 5432:5432
        # Options to wait for the database to be ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a specific version like '3.11' if needed

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run Backend tests
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/lm_studio_agents_test
          FLASK_ENV: testing # Set appropriate env for testing if needed
        run: pytest app/tests/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Run Frontend tests
        run: npm run test # Assumes 'test' script exists in package.json

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test] # Ensure lint and test pass before building
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image
        run: docker build -f Dockerfile.backend --tag my-backend-image:latest .

      - name: Build Frontend Docker image
        run: docker build -f Dockerfile.frontend --tag my-frontend-image:latest .

