FROM python:3.11-slim as build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --user -r requirements.txt gunicorn

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production
ENV FLASK_APP=wsgi.py
ENV ANALYTICS_ENABLED=true
ENV ANALYTICS_LOG_LEVEL=info
ENV KEYWORDS_TRACKING_ENABLED=true

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    netcat-openbsd \
    dos2unix \
    && rm -rf /var/lib/apt/lists/*

# Copy installed Python packages from build stage
COPY --from=build /root/.local /root/.local
# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt gunicorn

# Copy application code
COPY migrations ./migrations
COPY wsgi.py .
COPY app ./app
COPY instance ./instance
COPY docker/start.sh ./start.sh

# Create necessary directories
RUN mkdir -p /app/logs/analytics /app/static /app/analytics/data

# Make startup script executable and ensure Unix line endings
RUN dos2unix ./start.sh && chmod +x ./start.sh

# Set up logging
ENV LOG_PATH=/app/logs/app.log
ENV ANALYTICS_LOG_PATH=/app/logs/analytics.log
ENV KEYWORDS_LOG_PATH=/app/logs/keywords.log

EXPOSE 5000

# Run startup script
# Ensure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# LM Studio environment variables
ENV LM_API_BASE_URL=http://localhost:1234
ENV LM_API_KEY=
ENV LM_MODEL=default

# Run as non-root user
RUN useradd -m appuser && chown -R appuser /app
USER appuser

CMD ["/bin/sh", "./start.sh"]
