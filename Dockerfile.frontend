FROM node:16-alpine as build-stage

WORKDIR /frontend

# Copy only package files first for better layer caching
COPY package.json package-lock.json ./
RUN npm ci --prefer-offline --no-audit

# Copy config files
COPY vue.config.js .
COPY tsconfig.json .

# Install dependencies including Vue CLI service locally
# Use install since we might not have package-lock.json
RUN npm install --no-audit --prefer-offline

# Create public directory with index.html
RUN mkdir -p public
COPY public/index.html ./public/

# Copy source code
COPY src ./src

# Set environment variables
ENV NODE_ENV=production
ENV DISABLE_ESLINT_PLUGIN=true
ENV VUE_APP_ANALYTICS_ENABLED=true
ENV VUE_APP_CHART_THEME=light
# Build with optimization
# Build with environment variables
RUN VUE_APP_VERSION=${VUE_APP_VERSION} \
    VUE_APP_LM_API_BASE_URL=${VUE_APP_LM_API_BASE_URL} \
    ./node_modules/.bin/vue-cli-service build --mode production

# Create a production-stage image
# Use Node 20 LTS
FROM node:20-alpine as build-stage

# Configure build arguments for LM Studio
ARG VUE_APP_LM_API_BASE_URL
ARG VUE_APP_LM_API_KEY
ARG VUE_APP_VERSION=production

WORKDIR /app

# Install serve for production serving
RUN npm install -g serve
# Create log directory
RUN mkdir -p /app/logs
RUN mkdir -p /app/logs/analytics

# Copy from build stage
COPY --from=build-stage /frontend/dist /app/dist

# Environment variables for runtime
ENV HOST=0.0.0.0
ENV PORT=8080
ENV SERVE_OPTS="--single --cors --compress"

EXPOSE 8080

# Healthcheck to verify service is running
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget -q -O- http://localhost:8080/ || exit 1

CMD ["serve", "-s", "dist", "-l", "8080"]
